{"version":3,"sources":["../../../../src/app/http-wrapper/http-wrapper.ts"],"names":[],"mappings":"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","file":"http-wrapper.js","sourceRoot":"","sourcesContent":["import { Http, Response, RequestOptionsArgs, Headers } from '@angular/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/observable/throw';\n\ntype ResponseInterceptor = (response: any) => any;\ntype RequestInterceptor = (request: any) => any;\ntype ErrorInterceptor = (error: any) => any;\n\nconst absoluteURLPattern = /^((?:https:\\/\\/)|(?:http:\\/\\/)|(?:www))/;\n\n\nexport class HttpWrapper {\n  /**\n   * Headers used in all requests.\n   */\n  private headers: any = {};\n\n  /**\n   * Base url used in all requests.\n   */\n  protected baseUrl = '';\n\n  /**\n   * Response interceptors which are fired on every response\n   * @type {Array}\n   */\n  private responseInterceptors: Array<ResponseInterceptor> = [];\n\n  /**\n   * Response interceptors which are fired on every response\n   * @type {Array}\n   */\n  private requestInterceptors: Array<RequestInterceptor> = [];\n\n  /**\n   * Response interceptors which are fired on every response\n   * @type {Array}\n   */\n  private errorInterceptors: Array<ErrorInterceptor> = [];\n\n  /**\n   * @param http     Angular Http service.\n   */\n  constructor(protected http: Http) {\n    this.addResponseInterceptor(this.defaultResponseInterceptor);\n    this.addRequestInterceptor(this.defaultRequestInterceptor);\n    this.addErrorInterceptor(this.defaultErrorInterceptor);\n  }\n\n  /**\n   * default response interceptor\n   * @param resp Response\n   * @returns {any}\n   */\n  protected defaultResponseInterceptor(resp: Response): any {\n    if (typeof resp.json === 'function') {\n      return resp.json();\n    }\n\n    /* istanbul ignore next */\n    if (typeof resp.text === 'function') {\n      return resp.text();\n    }\n\n    return resp;\n  }\n\n  /**\n   * default request interceptor\n   * @param req any\n   * @returns {any}\n   */\n  protected defaultRequestInterceptor(req: any): string {\n    return JSON.stringify(req);\n  }\n\n  /**\n   * default error interceptor\n   * @param res Response\n   * @returns {any}\n   */\n  protected defaultErrorInterceptor(resp: Response): any {\n    let data;\n    /* istanbul ignore else */\n    if (typeof resp.json === 'function') {\n      data = resp.json();\n    } else {\n      data = resp.statusText;\n    }\n\n    return { status: resp.status, data };\n  }\n\n  /**\n   * Sets header for all requests.\n   * @param key      A header key.\n   * @param value    A value for the key.\n   */\n  setHeader(key: string, value: string) {\n    this.headers[key] = value;\n  }\n\n  /**\n   * Gets header by key for all requests.\n   * @param key      A header key.\n   * @returns value\n   */\n  getHeaderByKey(key: string) {\n    return this.headers[key];\n  }\n\n  /**\n   * Sets base url for all requests.\n   * @param url      A base url\n   */\n  setBaseUrl(url: string) {\n    this.baseUrl = url;\n  }\n\n  /**\n   * Add response interceptor to all responses\n   * @param interceptor A ResponseInterceptor\n   */\n  addResponseInterceptor<T, S>(interceptor: (arg: T) => S): void {\n    this.responseInterceptors = [ ...this.responseInterceptors, interceptor ];\n  }\n\n  /**\n   * Add error interceptor to all responses\n   * @param interceptor A ResponseInterceptor\n   */\n  addErrorInterceptor<T, S>(interceptor: (arg: T) => S): void {\n    this.errorInterceptors = [ ...this.errorInterceptors, interceptor ];\n  }\n\n  /**\n   * Add reuquest interceptor to all reuqests\n   * @param interceptor A RequestInterceptor\n   */\n  addRequestInterceptor<T, S>(interceptor: (arg: T) => S): void {\n    this.requestInterceptors = [ interceptor, ...this.requestInterceptors ];\n  }\n\n  /**\n   * Removes header for all requests.\n   * @param key      A header key.\n   */\n  removeHeader(key: string) {\n    delete this.headers[key];\n  }\n\n  /**\n   * Performs a request with `get` http method.\n   * @param url      An url which is used in a http request.\n   * @param options  A request options arguments.\n   * @returns        It returns a cold Observable which emits one value (in JavaScript format) from the request.\n   */\n  get<T>(url: string, options?: RequestOptionsArgs): Observable<T> {\n    return this.http.get(this.generateUrl(url), this.generateOptions(options))\n      .map(this.responseHandler, this)\n      .catch(this.errorHandler.bind(this));\n  }\n\n  /**\n   * Performs a request with `post` http method.\n   * @param url      An url which is used in a http request.\n   * @param data     Data (in JavaScript format) which is used in a http request.\n   * @param options  A request options arguments.\n   * @returns        It returns a cold Observable which emits one value (in JavaScript format) from the request.\n   */\n  post<T>(url: string, data: Object, options?: RequestOptionsArgs): Observable<T> {\n    const newData = this.prepareData(data);\n    return this.http.post(this.generateUrl(url), newData, this.generateOptions(options))\n      .map(this.responseHandler, this)\n      .catch(this.errorHandler.bind(this));\n  }\n\n  /**\n   * Performs a request with `put` http method.\n   * @param url      An url which is used in a http request.\n   * @param data     Data (in JavaScript format) which is used in a http request.\n   * @param options  A request options arguments.\n   * @returns        It returns a cold Observable which emits one value (in JavaScript format) from the request.\n   */\n  put<T>(url: string, data: Object, options?: RequestOptionsArgs): Observable<T> {\n    const newData = this.prepareData(data);\n    return this.http.put(this.generateUrl(url), newData, this.generateOptions(options))\n      .map(this.responseHandler, this)\n      .catch(this.errorHandler.bind(this));\n  }\n\n  /**\n   * Performs a request with `patch` http method.\n   * @param url      An url which is used in a http request.\n   * @param data     Data (in JavaScript format) which is used in a http request.\n   * @param options  A request options arguments.\n   * @returns        It returns a cold Observable which emits one value (in JavaScript format) from the request.\n   */\n  patch<T>(url: string, data: Object, options?: RequestOptionsArgs): Observable<T> {\n    const newData = this.prepareData(data);\n    return this.http.patch(this.generateUrl(url), newData, this.generateOptions(options))\n      .map(this.responseHandler, this)\n      .catch(this.errorHandler.bind(this));\n  }\n\n  /**\n   * Performs a request with `delete` http method.\n   * @param url      An url which is used in a http request.\n   * @param options  A request options arguments.\n   * @returns        It returns a cold Observable which emits one value (in JavaScript format) from the request.\n   */\n  delete<T>(url: string, options?: RequestOptionsArgs): Observable<T> {\n    return this.http.delete(this.generateUrl(url), this.generateOptions(options))\n      .map(this.responseHandler, this)\n      .catch(this.errorHandler.bind(this));\n  }\n\n  /**\n   * Prepare data for request with interceptors\n   * @param data     any\n   * @returns        string\n   */\n  protected prepareData(data: any): string {\n    return this.requestInterceptors.reduce((acc, interceptor) => interceptor(acc), data);\n  }\n\n  /**\n   * Handler which transform response to JavaScript format if response exists.\n   * @param resp     Http response\n   * @returns        any\n   */\n  protected responseHandler(resp: Response): any {\n    return this.responseInterceptors.reduce((acc: any, interceptor: any) => interceptor(acc), resp);\n  }\n\n  protected errorHandler(error: Response): Observable<any> {\n    return Observable.throw(\n      this.errorInterceptors.reduce((acc: any, interceptor: any) => interceptor(acc), error)\n    );\n  }\n\n  /**\n   * Handler which generate url for all requests. It uses baseUrl if url doesn't start with 'http'' or 'www'.\n   * @param url     Url string\n   * @returns       Generated url string\n   */\n  protected generateUrl(url: string): string {\n    return url.match(absoluteURLPattern) ? url : this.baseUrl + url;\n  }\n\n  /**\n   * Handler which generate options for all requests from headers.\n   * @param options   Request options arguments\n   * @returns         Request options arguments\n   */\n  protected generateOptions(options: RequestOptionsArgs = {}): RequestOptionsArgs {\n    if (!options.headers) {\n      options.headers = new Headers();\n    }\n\n    Object.keys(this.headers)\n      .filter((key) => this.headers.hasOwnProperty(key))\n      .forEach((key) => {\n        options.headers.append(key, this.headers[key]);\n      });\n\n    return options;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}